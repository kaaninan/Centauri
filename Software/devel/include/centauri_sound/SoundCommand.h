// Generated by gencpp from file centauri_sound/SoundCommand.msg
// DO NOT EDIT!


#ifndef CENTAURI_SOUND_MESSAGE_SOUNDCOMMAND_H
#define CENTAURI_SOUND_MESSAGE_SOUNDCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace centauri_sound
{
template <class ContainerAllocator>
struct SoundCommand_
{
  typedef SoundCommand_<ContainerAllocator> Type;

  SoundCommand_()
    : cmd()
    , param()  {
    }
  SoundCommand_(const ContainerAllocator& _alloc)
    : cmd(_alloc)
    , param(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cmd_type;
  _cmd_type cmd;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _param_type;
  _param_type param;




  typedef boost::shared_ptr< ::centauri_sound::SoundCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::centauri_sound::SoundCommand_<ContainerAllocator> const> ConstPtr;

}; // struct SoundCommand_

typedef ::centauri_sound::SoundCommand_<std::allocator<void> > SoundCommand;

typedef boost::shared_ptr< ::centauri_sound::SoundCommand > SoundCommandPtr;
typedef boost::shared_ptr< ::centauri_sound::SoundCommand const> SoundCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::centauri_sound::SoundCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::centauri_sound::SoundCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace centauri_sound

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'centauri_sound': ['/home/robot/Centauri/Software/src/centauri_sound/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::centauri_sound::SoundCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::centauri_sound::SoundCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::centauri_sound::SoundCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::centauri_sound::SoundCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::centauri_sound::SoundCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::centauri_sound::SoundCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::centauri_sound::SoundCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f57c5646299694f577923099e79540a";
  }

  static const char* value(const ::centauri_sound::SoundCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f57c5646299694fULL;
  static const uint64_t static_value2 = 0x577923099e79540aULL;
};

template<class ContainerAllocator>
struct DataType< ::centauri_sound::SoundCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "centauri_sound/SoundCommand";
  }

  static const char* value(const ::centauri_sound::SoundCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::centauri_sound::SoundCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string cmd\n\
string param\n\
";
  }

  static const char* value(const ::centauri_sound::SoundCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::centauri_sound::SoundCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
      stream.next(m.param);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SoundCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::centauri_sound::SoundCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::centauri_sound::SoundCommand_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cmd);
    s << indent << "param: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.param);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CENTAURI_SOUND_MESSAGE_SOUNDCOMMAND_H
